# Launching a simulation
To solver the Euler equations, do

julia /path/to/startup.jl "input_file_name.jl"

where input_file_name.jl is in your current directory.

# The following keys are used for the options dictionary in the input file

"run_type"  : what type of run, 1 = rk4, 4 = Newton finite difference, 5 = Newton complex step (integer)

"order" : order of accuracy of elements, 1-4 will be supported eventually (integer)
"dimensions" : specifies the dimensions of the physical problem, 2D or 3D (integer). Default = 2

"delta_t" = timestep for rk4 (floating point)
"t_max" = maximum time for rk4 (floating point)

"smb_name" : name of smb file if using Pumi (string), if it appears to be a relative path (ie. does not begin with a "/"), it is relative to the installation directory of PDESolver.  If it appears to be an absolute path, it is treated as such
"dmg_name" : name of dmg file if using Pumi (string), same behavior as "smb_name", default ".null" (you must omit this key if you are using the null geometric model)

"IC_name" : initial condition function name (string)

"res_abstol" : stopping tolerance for residual, used by rk4 and Newton methods, (floatingpoint), default 1e-6
"res_reltol"  : stopping tolerance for residual relative to some initial value, (floatingpoint), default 1e-6
"res_reltol0"  : value to use for relative residual calculation, use -1.0 to use residual at initial condition, (floatingpoint), default -1.0
"step_tol" : step size tolerance for Newton methods (floating point)
"itermax" : maximum number of iterations for Newton methods (integer)
"Reltol_funcs"  : an initial condition function name, the residual of the equation using this as the input is used for the relative residual calculation, (ASCIIString), defualt "none".  Note that this function will override res_reltol0 = -1.0
# boundary condition specification
"numBC" : number of boundary condtions used

# for each boundary condition there must be:
"BCi" : model edges (for 2d) where the boundary condition is applied
"BCi_name" : name of boundary condition to apply

# where i is the index of the boundary condition
# i must have values 1 through numBC

# misc options
"calc_error"  : calculate error norm of values in a file compared to the initial condition, number of values in the file must equal the number of dofs in the mesh, (Bool), default false
"calc_error_infname"  : name of file to load, (ASCIIString), 
"calc_error_outfname"  : name of file to write value to, (ASCIIString), default error_calc.dat
"calc_trunc_error"  : calculate truncation error, IC must be exact solution for this to work, writes value to file error_trunc.dat, (Bool), default false

# paramters used by boundary and initial condiitions
"Ma" : free stream Mach number (floating point)
"Re" : Reynolds number (using the chord length as the distance) (floatingpoint)
"aoa" : angle of attack in degrees (floating point)
"rho_free" : free stream density
"E_free" : free stream energy
"edgestab_gamma"  : edge stabilization parameter, (floatingpoint), default -0.1
"perturb_ic" : add random noise to initial condition, (Bool), default false
"perturb_mag" : magnitude of perturbation (perturbation could be + or -), (Float64), default 0.0
"write_finalsolution"  : write final solution (in vector form) to file, (Bool), default false
"write_finalresidual"  : write final residual (in vector form) to file, (Bool), default false


# stabilization options
"use_edgestab" : use edge stabilization, (Bool), default true
"edgestab_gamma" edge stabilization paramater gamma, (floatingpoint), default -0.1
"use_filter" : use a filtering technique, (Bool), default false
"use_res_filter" : apply the transposed filter to the residual, (Bool), default false
"filter_name", name of filter to apply, (ASCIIString), default "raisedCosineFilter"
"use_dissipation" : use artificial dissipation, (Bool), default false
"dissipation_name" : name of artificial dissipation kernel to use, (ASCIIString), default "none"
"dissipation_const" : constant to multiply dissipation filter by, (Float64), default 0.0
# solver debugging options
"writeboundary" : write boundary faces and fluxes to files using the writeBoundary()  function, to files named boundaryfaces.dat, boundaryflux.dat, boundaryflux2.dat, (bool), default false
"writeflux"  : writes the equation flux to the file Fxi.dat, space delimted, default false
"writeq"  : writes solution variables to the file q.dat, space delimited, (Bool) default false

# mesh debugging options
"write_edge_vertnums"  : writes the vertex numbers of every edge to edge_vertnusm.dat (Bool), default false
"write_face_vertnums" : writes vertex number of every face to face_vertnums.dat, (Bool), default false
"write_boundarynums"  : writes the elements  number, global face number of each face with a boundary condition, one per line, to file boundary_nums.dat, (Bool), default false
"write_dxidx"  : writes dxidx for every node to file dxidx.dat, (Bool) default falsea
"write_coords" : writes coordinates of every node to file coords.dat, (Bool), default false
"write_sparsity" : write upper and lower dof bounds to sparsity_bnds.dat, (Bool), default false
"vertify_coloring"  : verify coloring worked correctly, (Bool), default true
"write_counts"  : write the count of various entities used for estimating memory usage, (Bool), default false

# mesh options
"reordering_algorithm" : which node reordering algorithm to use, options are 
                         "adjacency" for the adjacency based reordering by Zhou 
                          et.al., or "default" for a more simplistic default
"reordering_start_coords" : coordinates of a point to start the reordering at.
                            The highest dof number will be assigned to the vertex
                            nearest this point.  (Array of length 2), default [0, 0].
                            Not supported by the default reordering algorithm.

# Newton's Method debugging options
"write_rhs"  : write rhs (residual) to a file (rhs$i.dat) each iteration, (Bool), default false
"write_jac"  : write the Jacobian to a file (jacobian$i.dat) each iteration, (Bool), default false
"print_cond" : calculate and print Jacobian condition number each iteration, (Bool), default false
"write_sol"  : write the solution to a file (res_vec$i.dat) each iteration, (Bool), default false
"write_res"  : write the residual in 3d form (res$i.dat) each iteration, (Bool), default false
"write_qic"  : write the initial condition, assembled into 3d array form, to file qic.dat, (Bool), default false
"write_vis"  : write Paraview files (solution_newton$i.pvtu) each iteration, (Bool), default false
"print_eigs" : calculate and print eigenvalues to STDOUT.  The calculation is very expensive, (Bool), default false
"write_eigs" : calculate and write eigenvalues to file (eigs$i.dat) each iteration.  If both pritn_eigs and write_eigs are true, only one calculation is performed.  (Bool), default false

# Newton's Method options
"jac_type"  : set calculation/storage method of Jacobian, (Int), 1 == dense, 2 == sparse, default= sparse, 3 = Petsc (therefore sparse)
"epsilon"  : perturbation size when calculation Jacobian, (Float64), default 1e-6 for finite difference, 1e-20 to complex step

# testing options
"solve" : call the solver specified by run_type, (Bool), default true
